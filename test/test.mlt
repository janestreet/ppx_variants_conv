open Variantslib;;

#verbose true

(* to ensure we do not generate such warning *)
[@@@ocaml.warning "+4"]

module Normal = struct
  type t =
    | Foo of int
    | Bar
    | Exception
  [@@deriving variants]
end

[%%expect
  {|
module Normal :
  sig
    type t = Foo of int | Bar | Exception
    val foo : int -> t
    val bar : t
    val exception_ : t
    val is_foo : t -> bool
    val is_bar : t -> bool
    val is_exception_ : t -> bool
    val foo_val : t -> int option
    val bar_val : t -> unit option
    val exception__val : t -> unit option
    module Variants :
      sig
        val foo : (int -> t) Variant.t
        val bar : t Variant.t
        val exception_ : t Variant.t
        val fold :
          init:'a ->
          foo:('a -> (int -> t) Variant.t -> 'b) ->
          bar:('b -> t Variant.t -> 'c) ->
          exception_:('c -> t Variant.t -> 'd) -> 'd
        val iter :
          foo:((int -> t) Variant.t -> unit) ->
          bar:(t Variant.t -> unit) ->
          exception_:(t Variant.t -> unit) -> unit
        val map :
          t ->
          foo:((int -> t) Variant.t -> int -> 'a) ->
          bar:(t Variant.t -> 'a) -> exception_:(t Variant.t -> 'a) -> 'a
        val make_matcher :
          foo:((int -> t) Variant.t -> 'a -> (int -> 'b) * 'c) ->
          bar:(t Variant.t -> 'c -> (unit -> 'b) * 'd) ->
          exception_:(t Variant.t -> 'd -> (unit -> 'b) * 'e) ->
          'a -> (t -> 'b) * 'e
        val to_rank : local_ t -> int
        val to_name : t -> string
        val descriptions : (string * int) list
      end
  end
|}]

module Normal2 : sig
  type t =
    | Foo of int
    | Bar
    | Exception
  [@@deriving variants]
end =
  Normal

[%%expect
  {|
module Normal2 :
  sig
    type t = Foo of int | Bar | Exception
    val foo : int -> t
    val bar : t
    val exception_ : t
    val is_foo : t -> bool
    val is_bar : t -> bool
    val is_exception_ : t -> bool
    val foo_val : t -> int option
    val bar_val : t -> unit option
    val exception__val : t -> unit option
    module Variants :
      sig
        val foo : (int -> t) Variant.t
        val bar : t Variant.t
        val exception_ : t Variant.t
        val fold :
          init:'acc__0 ->
          foo:('acc__0 -> (int -> t) Variant.t -> 'acc__1) ->
          bar:('acc__1 -> t Variant.t -> 'acc__2) ->
          exception_:('acc__2 -> t Variant.t -> 'acc__3) -> 'acc__3
        val iter :
          foo:((int -> t) Variant.t -> unit) ->
          bar:(t Variant.t -> unit) ->
          exception_:(t Variant.t -> unit) -> unit
        val map :
          t ->
          foo:((int -> t) Variant.t -> int -> 'result__) ->
          bar:(t Variant.t -> 'result__) ->
          exception_:(t Variant.t -> 'result__) -> 'result__
        val make_matcher :
          foo:((int -> t) Variant.t ->
               'acc__0 -> (int -> 'result__) * 'acc__1) ->
          bar:(t Variant.t -> 'acc__1 -> (unit -> 'result__) * 'acc__2) ->
          exception_:(t Variant.t -> 'acc__2 -> (unit -> 'result__) * 'acc__3) ->
          'acc__0 -> (t -> 'result__) * 'acc__3
        val to_rank : local_ t -> int
        val to_name : t -> string
        val descriptions : (string * int) list
      end
  end
|}]

module Normal_portable : sig
  type t =
    | Foo of int
    | Bar
    | Exception
  [@@deriving variants ~portable]
end = struct
  type t =
    | Foo of int
    | Bar
    | Exception
  [@@deriving variants]
end

[%%expect
  {|
module Normal_portable :
  sig
    type t = Foo of int | Bar | Exception
    val foo : int -> t @@ portable
    val bar : t @@ portable
    val exception_ : t @@ portable
    val is_foo : t -> bool @@ portable
    val is_bar : t -> bool @@ portable
    val is_exception_ : t -> bool @@ portable
    val foo_val : t -> int option @@ portable
    val bar_val : t -> unit option @@ portable
    val exception__val : t -> unit option @@ portable
    module Variants :
      sig
        val foo : (int -> t) Variant.t @@ portable
        val bar : t Variant.t @@ portable
        val exception_ : t Variant.t @@ portable
        val fold :
          init:'acc__0 ->
          foo:('acc__0 -> (int -> t) Variant.t -> 'acc__1) ->
          bar:('acc__1 -> t Variant.t -> 'acc__2) ->
          exception_:('acc__2 -> t Variant.t -> 'acc__3) -> 'acc__3 @@
          portable
        val iter :
          foo:((int -> t) Variant.t -> unit) ->
          bar:(t Variant.t -> unit) ->
          exception_:(t Variant.t -> unit) -> unit @@ portable
        val map :
          t ->
          foo:((int -> t) Variant.t -> int -> 'result__) ->
          bar:(t Variant.t -> 'result__) ->
          exception_:(t Variant.t -> 'result__) -> 'result__ @@ portable
        val make_matcher :
          foo:((int -> t) Variant.t ->
               'acc__0 -> (int -> 'result__) * 'acc__1) ->
          bar:(t Variant.t -> 'acc__1 -> (unit -> 'result__) * 'acc__2) ->
          exception_:(t Variant.t -> 'acc__2 -> (unit -> 'result__) * 'acc__3) ->
          'acc__0 -> (t -> 'result__) * 'acc__3 @@ portable
        val to_rank : local_ t -> int @@ portable
        val to_name : t -> string @@ portable
        val descriptions : (string * int) list @@ portable
      end
  end
|}]

module Normal_portable_error = struct
  type t =
    | Foo of Normal2.t
    | Bar
    | Exception
  [@@deriving variants ~portable]
end

[%%expect
  {|
Line _, characters _-_:
Error: Ppxlib.Deriving: generator 'variants' doesn't accept argument
       'portable'
|}]

module Mutable_portable_error : sig
  type t =
    | Foo
    | Bar of int ref
  [@@deriving variants ~portable]
end = struct
  type t =
    | Foo
    | Bar of int ref
  [@@deriving variants]
end

[%%expect
  {|
Line _, characters _-_:
Error: Signature mismatch:
       ...
       ...
       In module Variants:
       Values do not match:
         val fold :
           init:'a ->
           foo:('a -> t Variant.t @ contended -> 'b) ->
           bar:('b -> (int ref -> t) Variant.t -> 'c) -> 'c @@ portable
       is not included in
         val fold :
           init:'acc__0 ->
           foo:('acc__0 -> t Variant.t -> 'acc__1) ->
           bar:('acc__1 -> (int ref -> t) Variant.t -> 'acc__2) -> 'acc__2 @@
           portable
       The type
         init:'a ->
         foo:('a -> t Variant.t @ contended -> 'b) ->
         bar:('b -> (int ref -> t) Variant.t -> 'c) -> 'c
       is not compatible with the type
         init:'a ->
         foo:('a -> t Variant.t -> 'b) ->
         bar:('b -> (int ref -> t) Variant.t -> 'd) -> 'd
       Type t Variant.t @ contended -> 'b is not compatible with type
         t Variant.t -> 'b
       File "test.mlt", lines 199-202, characters 2-33: Expected declaration
       File "test.mlt", lines 204-207, characters 2-23: Actual declaration
|}]

module Normal_inline_record = struct
  type t =
    | Foo of
        { a : int
        ; b : string
        }
    | Bar
  [@@deriving variants]
end

[%%expect
  {|
module Normal_inline_record :
  sig
    type t = Foo of { a : int; b : string; } | Bar
    val foo : a:int -> b:string -> t
    val bar : t
    val is_foo : t -> bool
    val is_bar : t -> bool
    val foo_val : t -> ([> `a of int ] * [> `b of string ]) option
    val bar_val : t -> unit option
    module Variants :
      sig
        val foo : (a:int -> b:string -> t) Variant.t
        val bar : t Variant.t
        val fold :
          init:'a ->
          foo:('a -> (a:int -> b:string -> t) Variant.t -> 'b) ->
          bar:('b -> t Variant.t -> 'c) -> 'c
        val iter :
          foo:((a:int -> b:string -> t) Variant.t -> unit) ->
          bar:(t Variant.t -> unit) -> unit
        val map :
          t ->
          foo:((a:int -> b:string -> t) Variant.t -> a:int -> b:string -> 'a) ->
          bar:(t Variant.t -> 'a) -> 'a
        val make_matcher :
          foo:((a:int -> b:string -> t) Variant.t ->
               'a -> (a:int -> b:string -> 'b) * 'c) ->
          bar:(t Variant.t -> 'c -> (unit -> 'b) * 'd) ->
          'a -> (t -> 'b) * 'd
        val to_rank : local_ t -> int
        val to_name : t -> string
        val descriptions : (string * int) list
      end
  end
|}]

module Poly = struct
  type 'a t =
    [ `Foo of int
    | `Bar
    | `Exception
    ]
  [@@deriving variants]
end

[%%expect
  {|
module Poly :
  sig
    type 'a t = [ `Bar | `Exception | `Foo of int ]
    val foo : 'a -> [> `Foo of 'a ]
    val bar : [> `Bar ]
    val exception_ : [> `Exception ]
    val is_foo : [> `Foo of 'a ] -> bool
    val is_bar : [> `Bar ] -> bool
    val is_exception_ : [> `Exception ] -> bool
    val foo_val : [> `Foo of 'a ] -> 'a option
    val bar_val : [> `Bar ] -> unit option
    val exception__val : [> `Exception ] -> unit option
    module Variants :
      sig
        val foo : ('a -> [> `Foo of 'a ]) Variant.t
        val bar : [> `Bar ] Variant.t
        val exception_ : [> `Exception ] Variant.t
        val fold :
          init:'a ->
          foo:('a -> ('b -> [> `Foo of 'b ]) Variant.t -> 'c) ->
          bar:('c -> [> `Bar ] Variant.t -> 'd) ->
          exception_:('d -> [> `Exception ] Variant.t -> 'e) -> 'e
        val iter :
          foo:(('a -> [> `Foo of 'a ]) Variant.t -> unit) ->
          bar:([> `Bar ] Variant.t -> unit) ->
          exception_:([> `Exception ] Variant.t -> unit) -> unit
        val map :
          [< `Bar | `Exception | `Foo of 'a ] ->
          foo:(('b -> [> `Foo of 'b ]) Variant.t -> 'a -> 'c) ->
          bar:([> `Bar ] Variant.t -> 'c) ->
          exception_:([> `Exception ] Variant.t -> 'c) -> 'c
        val make_matcher :
          foo:(('a -> [> `Foo of 'a ]) Variant.t -> 'b -> ('c -> 'd) * 'e) ->
          bar:([> `Bar ] Variant.t -> 'e -> (unit -> 'd) * 'f) ->
          exception_:([> `Exception ] Variant.t -> 'f -> (unit -> 'd) * 'g) ->
          'b -> ([< `Bar | `Exception | `Foo of 'c ] -> 'd) * 'g
        val to_rank : local_ [< `Bar | `Exception | `Foo of 'a ] -> int
        val to_name : [< `Bar | `Exception | `Foo of 'a ] -> string
        val descriptions : (string * int) list
      end
  end
|}]

module Wildcard : sig
  type _ t =
    | A
    | B
  [@@deriving variants]
end = struct
  type _ t =
    | A
    | B
  [@@deriving variants]
end

[%%expect
  {|
module Wildcard :
  sig
    type _ t = A | B
    val a : 'param__001_ t
    val b : 'param__001_ t
    val is_a : 'param__001_ t -> bool
    val is_b : 'param__001_ t -> bool
    val a_val : 'param__001_ t -> unit option
    val b_val : 'param__001_ t -> unit option
    module Variants :
      sig
        val a : 'param__001_ t Variant.t
        val b : 'param__001_ t Variant.t
        val fold :
          init:'acc__0 ->
          a:('acc__0 -> 'param__001_ t Variant.t -> 'acc__1) ->
          b:('acc__1 -> 'param__001_ t Variant.t -> 'acc__2) -> 'acc__2
        val iter :
          a:('param__001_ t Variant.t -> unit) ->
          b:('param__001_ t Variant.t -> unit) -> unit
        val map :
          'param__001_ t ->
          a:('param__001_ t Variant.t -> 'result__) ->
          b:('param__001_ t Variant.t -> 'result__) -> 'result__
        val make_matcher :
          a:('param__001_ t Variant.t ->
             'acc__0 -> (unit -> 'result__) * 'acc__1) ->
          b:('param__001_ t Variant.t ->
             'acc__1 -> (unit -> 'result__) * 'acc__2) ->
          'acc__0 -> ('param__001_ t -> 'result__) * 'acc__2
        val to_rank : local_ 'param__001_ t -> int
        val to_name : 'param__001_ t -> string
        val descriptions : (string * int) list
      end
  end
|}]

module Gadt_no_existentials : sig
  (* We test:
     - mix of non GADT and GADT
     - GADT where the result type is constrained
     - GADT where using inline records
     - GADT with polymorphic type vars
  *)
  type _ t =
    | C0 of int
    | C1 : bool -> unit t
    | C2 : { a : bool } -> float t
    | C3 : 'a -> 'a t
  [@@deriving variants]
end = struct
  type _ t =
    | C0 of int
    | C1 : bool -> unit t
    | C2 : { a : bool } -> float t
    | C3 : 'a -> 'a t
  [@@deriving variants]
end

[%%expect
  {|
module Gadt_no_existentials :
  sig
    type _ t =
        C0 of int
      | C1 : bool -> unit t
      | C2 : { a : bool; } -> float t
      | C3 : 'a -> 'a t
    val c0 : int -> 'param__008_ t
    val c1 : bool -> unit t
    val c2 : a:bool -> float t
    val c3 : 'a__009_ -> 'a__009_ t
    val is_c0 : 'param__008_ t -> bool
    val is_c1 : 'param__008_ t -> bool
    val is_c2 : 'param__008_ t -> bool
    val is_c3 : 'param__008_ t -> bool
    val c0_val : 'param__008_ t -> int option
    module Variants :
      sig
        val c0 : (int -> 'param__008_ t) Variant.t
        val c1 : (bool -> unit t) Variant.t
        val c2 : (a:bool -> float t) Variant.t
        val c3 : ('a__009_ -> 'a__009_ t) Variant.t
        val fold :
          init:'acc__0 ->
          c0:('acc__0 -> (int -> 'param__008_ t) Variant.t -> 'acc__1) ->
          c1:('acc__1 -> (bool -> unit t) Variant.t -> 'acc__2) ->
          c2:('acc__2 -> (a:bool -> float t) Variant.t -> 'acc__3) ->
          c3:('acc__3 -> ('a__009_ -> 'a__009_ t) Variant.t -> 'acc__4) ->
          'acc__4
        val iter :
          c0:((int -> 'param__008_ t) Variant.t -> unit) ->
          c1:((bool -> unit t) Variant.t -> unit) ->
          c2:((a:bool -> float t) Variant.t -> unit) ->
          c3:(('a__009_ -> 'a__009_ t) Variant.t -> unit) -> unit
        val to_rank : local_ 'param__008_ t -> int
        val to_name : 'param__008_ t -> string
        val descriptions : (string * int) list
      end
  end
|}]

module Gadt_existentials : sig
  (* We test:
     - GADT with no payload (mostly there to avoid the type being too simple)
     - GADT with existential type vars
     - GADT where vars in the type declaration and the return type of a constructor clash
  *)
  type 'a t =
    | C1 : bool t
    | C2 : 'b * 'a -> 'b t
  [@@deriving variants]
end = struct
  type 'a t =
    | C1 : bool t
    | C2 : 'b * 'a -> 'b t
  [@@deriving variants]
end

[%%expect
  {|
module Gadt_existentials :
  sig
    type 'a t = C1 : bool t | C2 : 'b * 'a -> 'b t
    val c1 : bool t
    val c2 : 'b__012_ -> 'a__013_ -> 'b__012_ t
    val is_c1 : 'a t -> bool
    val is_c2 : 'a t -> bool
    module Variants :
      sig
        val c1 : bool t Variant.t
        val c2 : ('b__012_ -> 'a__013_ -> 'b__012_ t) Variant.t
        val fold :
          init:'acc__0 ->
          c1:('acc__0 -> bool t Variant.t -> 'acc__1) ->
          c2:('acc__1 ->
              ('b__012_ -> 'a__013_ -> 'b__012_ t) Variant.t -> 'acc__2) ->
          'acc__2
        val iter :
          c1:(bool t Variant.t -> unit) ->
          c2:(('b__012_ -> 'a__013_ -> 'b__012_ t) Variant.t -> unit) -> unit
        val to_rank : local_ 'a t -> int
        val to_name : 'a t -> string
        val descriptions : (string * int) list
      end
  end
|}]

module Unboxed : sig
  type t =
    | Foo of { foo : float# } [@variants.non_value]
    | Bar of float# [@variants.non_value]
  [@@deriving variants]
end = struct
  type t =
    | Foo of { foo : float# } [@variants.non_value]
    | Bar of float# [@variants.non_value]
  [@@deriving variants]
end

[%%expect
  {|
module Unboxed :
  sig
    type t = Foo of { foo : float#; } | Bar of float#
    val foo : foo:float# -> t
    val bar : float# -> t
    val is_foo : t -> bool
    val is_bar : t -> bool
    module Variants :
      sig
        val foo : (foo:float# -> t) Variant.t
        val bar : (float# -> t) Variant.t
        val fold :
          init:'acc__0 ->
          foo:('acc__0 -> (foo:float# -> t) Variant.t -> 'acc__1) ->
          bar:('acc__1 -> (float# -> t) Variant.t -> 'acc__2) -> 'acc__2
        val iter :
          foo:((foo:float# -> t) Variant.t -> unit) ->
          bar:((float# -> t) Variant.t -> unit) -> unit
        val map :
          t ->
          foo:((foo:float# -> t) Variant.t -> foo:float# -> 'result__) ->
          bar:((float# -> t) Variant.t -> float# -> 'result__) -> 'result__
        val make_matcher :
          foo:((foo:float# -> t) Variant.t ->
               'acc__0 -> (foo:float# -> 'result__) * 'acc__1) ->
          bar:((float# -> t) Variant.t ->
               'acc__1 -> (float# -> 'result__) * 'acc__2) ->
          'acc__0 -> (t -> 'result__) * 'acc__2
        val to_rank : local_ t -> int
        val to_name : t -> string
        val descriptions : (string * int) list
      end
  end
|}]

module Gadt_non_values : sig
  (* This tests a bunch of edge cases:
     - a named and unnamed type parameter
     - mix of non GADT and GADT constructors
     - GADT where the result type is constrained
     - GADT where using inline records
     - GADT with polymorphic type vars
     - GADT cases whose type variable names overlap and are incompatible
  *)
  type ('a : any, 'b, _ : any) t =
    | C0 of ('b, 'b, 'a) t
    | C1 : 'a. { a : 'a } -> ('a, unit, unit) t
    | C2 : ('c : float64). bool -> ('c, float, float) t
    | C3 : ('a : any). bool -> ('a, float, float) t
    | C4 : 'a -> ('a, _, _) t
  [@@deriving variants]
end = struct
  type ('a : any, 'b, _ : any) t =
    | C0 of ('b, 'b, 'a) t
    | C1 : 'a. { a : 'a } -> ('a, unit, unit) t
    | C2 : ('c : float64). bool -> ('c, float, float) t
    | C3 : ('a : any). bool -> ('a, float, float) t
    | C4 : 'a -> ('a, _, _) t
  [@@deriving variants]
end

[%%expect
  {|
module Gadt_non_values :
  sig
    type ('a : any, 'b, _ : any) t =
        C0 of ('b, 'b, 'a) t
      | C1 : { a : 'a; } -> ('a, unit, unit) t
      | C2 : ('c : float64). bool -> ('c, float, float) t
      | C3 : ('a : any). bool -> ('a, float, float) t
      | C4 : 'a -> ('a, 'd, 'e) t
    val c0 :
      'b ('a : any) ('param__026_ : any).
        ('b, 'b, 'a) t -> ('a, 'b, 'param__026_) t
    val c1 : a:'a__027_ -> ('a__027_, unit, unit) t
    val c2 : ('c__028_ : float64). bool -> ('c__028_, float, float) t
    val c3 : ('a__029_ : any). bool -> ('a__029_, float, float) t
    val c4 : 'a__030_ -> ('a__030_, 'unnamed__031_, 'unnamed__032_) t
    val is_c0 :
      ('a : any) 'b ('param__026_ : any). ('a, 'b, 'param__026_) t -> bool
    val is_c1 :
      ('a : any) 'b ('param__026_ : any). ('a, 'b, 'param__026_) t -> bool
    val is_c2 :
      ('a : any) 'b ('param__026_ : any). ('a, 'b, 'param__026_) t -> bool
    val is_c3 :
      ('a : any) 'b ('param__026_ : any). ('a, 'b, 'param__026_) t -> bool
    val is_c4 :
      ('a : any) 'b ('param__026_ : any). ('a, 'b, 'param__026_) t -> bool
    val c0_val :
      ('a : any) 'b ('param__026_ : any).
        ('a, 'b, 'param__026_) t -> ('b, 'b, 'a) t option
    module Variants :
      sig
        val c0 :
          'b ('a : any) ('param__026_ : any).
            (('b, 'b, 'a) t -> ('a, 'b, 'param__026_) t) Variant.t
        val c1 : (a:'a__027_ -> ('a__027_, unit, unit) t) Variant.t
        val c2 :
          ('c__028_ : float64).
            (bool -> ('c__028_, float, float) t) Variant.t
        val c3 :
          ('a__029_ : any). (bool -> ('a__029_, float, float) t) Variant.t
        val c4 :
          ('a__030_ -> ('a__030_, 'unnamed__031_, 'unnamed__032_) t)
          Variant.t
        val fold :
          'acc__0 'b ('a : any) ('param__026_ : any) 'acc__1 'a__027_ 'acc__2
            ('c__028_ : float64) 'acc__3 ('a__029_ : any) 'acc__4 'a__030_
            'unnamed__031_ 'unnamed__032_ 'acc__5.
            init:'acc__0 ->
            c0:('acc__0 ->
                (('b, 'b, 'a) t -> ('a, 'b, 'param__026_) t) Variant.t ->
                'acc__1) ->
            c1:('acc__1 ->
                (a:'a__027_ -> ('a__027_, unit, unit) t) Variant.t -> 'acc__2) ->
            c2:('acc__2 ->
                (bool -> ('c__028_, float, float) t) Variant.t -> 'acc__3) ->
            c3:('acc__3 ->
                (bool -> ('a__029_, float, float) t) Variant.t -> 'acc__4) ->
            c4:('acc__4 ->
                ('a__030_ -> ('a__030_, 'unnamed__031_, 'unnamed__032_) t)
                Variant.t -> 'acc__5) ->
            'acc__5
        val iter :
          'b ('a : any) ('param__026_ : any) 'a__027_ ('c__028_ : float64)
            ('a__029_ : any) 'a__030_ 'unnamed__031_ 'unnamed__032_.
            c0:((('b, 'b, 'a) t -> ('a, 'b, 'param__026_) t) Variant.t ->
                unit) ->
            c1:((a:'a__027_ -> ('a__027_, unit, unit) t) Variant.t -> unit) ->
            c2:((bool -> ('c__028_, float, float) t) Variant.t -> unit) ->
            c3:((bool -> ('a__029_, float, float) t) Variant.t -> unit) ->
            c4:(('a__030_ -> ('a__030_, 'unnamed__031_, 'unnamed__032_) t)
                Variant.t -> unit) ->
            unit
        val to_rank :
          ('a : any) 'b ('param__026_ : any).
            local_ ('a, 'b, 'param__026_) t -> int
        val to_name :
          ('a : any) 'b ('param__026_ : any).
            ('a, 'b, 'param__026_) t -> string
        val descriptions : (string * int) list
      end
  end
|}]

type fail1 =
  [ Poly.t
  | `Blah
  ]
[@@deriving variants]

[%%expect
  {|
Line _, characters _-_:
Error: ppx_variants_conv: polymorphic variant inclusion is not supported
|}]

type fail2 =
  [> `Foo
  | `Bar
  ]
[@@deriving variants]

[%%expect
  {|
Line _, characters _-_:
Error: ppx_variants_conv: polymorphic variants with a row variable are not supported
|}]

type fail3 =
  [< `Foo
  | `Bar
  ]
[@@deriving variants]

[%%expect
  {|
Line _, characters _-_:
Error: ppx_variants_conv: polymorphic variants with a row variable are not supported
|}]

type fail4 =
  [< `Foo
  | `Bar > `Foo
  ]
[@@deriving variants]

[%%expect
  {|
Line _, characters _-_:
Error: ppx_variants_conv: polymorphic variants with a row variable are not supported
|}]
